"use client";
import axios from "axios";
// import { API_URL } from "../constants/URLS";
// API_URL = "http://localhost:9000";
const axiosClient = axios.create({
  baseURL: "http://localhost:9000",
  headers: {
    "Content-Type": "application/json",
  },
});
// trong interceptors c√≥ 2 lo·∫°i, m·ªôt l√† request, 2 l√† response
//Request interceptors: ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ can thi·ªáp v√†o qu√° tr√¨nh g·ª≠i y√™u c·∫ßu. B·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω nhi·ªÅu interceptor tr∆∞·ªõc khi y√™u c·∫ßu ƒë∆∞·ª£c g·ª≠i ƒëi.
//Response interceptors: ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ can thi·ªáp v√†o qu√° tr√¨nh nh·∫≠n ph·∫£n h·ªìi t·ª´ m√°y ch·ªß. B·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω nhi·ªÅu interceptor sau khi nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi.

//c√≥ c√°i n√†y ta kh√¥ng ph·∫£i th√™m passport.authenticate("jwt", { session: false }), ·ªü c√°c method n√†y ·ªü c√°c router

//interceptors ƒë√¢y l√† middleware, t·∫•t c·∫£ c√°c resonse ƒë·ªÅu qua interceptors

//qua page employee th√¨ n√≥ call api n√™n n√≥ ph·∫£i c√≥ interceptors.request, tr∆∞·ªõc khi b√™n employee request th√¨ n√≥ chui v√†o h√†m n√†y
// REQUEST

// Request interceptor
axiosClient.interceptors.request.use(
  //l·ª•c token trong localstorage ra, ki·ªÉm tra
  //N·∫øu c√≥, ch√∫ng ta th√™m token v√†o header Authorization trong config. Sau ƒë√≥, ch√∫ng ta tr·∫£ v·ªÅ config. N·∫øu c√≥ l·ªói,
  // ch√∫ng ta s·∫Ω s·ª≠ d·ª•ng Promise.reject(error) ƒë·ªÉ tr·∫£ v·ªÅ l·ªói ƒë√≥.
  (config) => {
    console.log("run");
    // Ki·ªÉm tra n·∫øu ƒëang ch·∫°y tr√™n ph√≠a client (tr√¨nh duy·ªát)
    if (typeof window !== "undefined") {
      const token = window.localStorage.getItem("token");
      // console.log("zzzz: ", token);
      if (token) {
        config.headers["Authorization"] = "Bearer " + token;
      }
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// RESPONSE

axiosClient.interceptors.response.use(
  async (response) => {
    const { token, refreshToken } = response.data;
    console.log("dataToken: ", response.data);
    // LOGIN
    //l∆∞u token v√†o localStorage
    if (token) {
      window.localStorage.setItem("token", token);
    }
    //l∆∞u refreshToken v√†o localStorage
    if (refreshToken) {
      window.localStorage.setItem("refreshToken", refreshToken);
    }

    return response;
  },
  //trong tr∆∞·ªùng h·ª£p c√≥ l·ªói
  async (error) => {
    if (error?.response?.status !== 401) {
      return Promise.reject(error);
    }

    const originalConfig = error.config;

    if (error?.response?.status === 401 && !originalConfig.sent) {
      console.log("Error üöÄ", error);
      originalConfig.sent = true;
      try {
        // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ token th√¨ chuy·ªÉn sang trang LOGIN
        if (typeof window !== "undefined") {
          const token = window.localStorage.getItem("token");
          if (!token) {
            window.location.href = "/login";
            return Promise.reject(error);
          }

          const refreshToken = window.localStorage.getItem("refreshToken");
          if (refreshToken) {
            const response = await axiosClient.post("/customer/refresh-token", {
              refreshToken: refreshToken,
            });

            const { token } = response.data;
            window.localStorage.setItem("token", token);

            originalConfig.headers = {
              ...originalConfig.headers,
              authorization: `Bearer ${token}`,
            };

            return axiosClient(originalConfig);
          } else {
            return Promise.reject(error);
          }
        }
      } catch (err) {
        return Promise.reject(err);
      }
    }
  }
);

export { axiosClient };
